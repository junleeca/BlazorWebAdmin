@using Project.AppCore.Auth
@using Project.AppCore.Services;
@using Project.Common
@inject EventDispatcher dispatcher
@inject UserStore store
@inject AuthenticationStateProvider Auth
@inject ILoginService LoginSrv
<div class="wrapper">
	<div class="inner_box">
		<AuthorizeView>
			<Authorized>
				<Dropdown Trigger=@(new Trigger[]{Trigger.Click})>
					<Overlay>
						<Menu>
							<MenuItem>
								<Button Type="@ButtonType.Text" OnClick="HandleLogout">注销</Button>
							</MenuItem>
						</Menu>
					</Overlay>
					<ChildContent>
						<img class="avatar" src="/assets/Cortana.png" />
					</ChildContent>
				</Dropdown>
				<span class="@NameClass.Class">@displayName</span>
			</Authorized>
		</AuthorizeView>
	</div>
</div>

@code {
	ClassHelper NameClass = new ClassHelper();
	private bool collapse = false;
	private string displayName => collapse ? "" : store.UserDisplayName;
	protected override Task OnInitializedAsync()
	{
		NameClass.AddClass("name");
		NameClass.AddClass("hide", () => collapse);
		dispatcher.Register<Profile>("AvatarCollapse", ToggleavatarCollapse);
		return base.OnInitializedAsync();
	}
	private Task<object> ToggleavatarCollapse(object sender,object e)
	{
		collapse = (bool)e;
		StateHasChanged();
		return Task.FromResult<object>(0);
	}

	async Task HandleLogout()
	{
		await LoginSrv.LogoutAsync();
		store.ClearUser();
		await ((CustomAuthenticationStateProvider)Auth).ClearState();
	}
}
