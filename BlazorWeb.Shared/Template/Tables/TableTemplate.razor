@using AntDesign.TableModels
@using AntDesign.Core.Helpers.MemberPath
@using BlazorWeb.Shared.Template.Tables.Setting
@typeparam TData
@typeparam TQuery
<div class="queryarea">
    <div class="condition">
        <Space Style="width:100%;">
            @if (QueryArea != null)
            {
                <SpaceItem Style="width:100%;">
                    @QueryArea(TableOptions.Query)
                </SpaceItem>
            }
            @if (TableOptions.DataLoader != null)
            {
                @if (EnableGenerateQuery)
                {
                    <SpaceItem>
                        <ConditionBuilder Columns=@TableOptions.Columns @bind-Info="conditionInfo"></ConditionBuilder>
                    </SpaceItem>
                }
                <SpaceItem>
                    <Button Type="@ButtonType.Primary" OnClick="Search">查询</Button>
                </SpaceItem>
                @if (EnableGenerateQuery)
                {
                    <SpaceItem>
                        <Button OnClick=@(()=>AdvanceModalVisible = true)>高级查询</Button>
                    </SpaceItem>
                }
            }
            @if (TableOptions.ExportDataLoader != null || !TableOptions.Page)
            {
                <SpaceItem>
                    <Button Type="@ButtonType.Primary" OnClick="Export">导出</Button>
                </SpaceItem>
            }
        </Space>
    </div>
    <div class="rightbutton">
        @if (TableOptions.AddHandle != null)
        {
            <Button Type="@ButtonType.Primary" OnClick=HandleAdd>新增</Button>
        }
        @if (Buttons != null)
        {
            @Buttons
        }
    </div>
</div>
<Card Class="layout-card mt-10">
    <Table DataSource=@TableOptions.Datas
           Loading=@loading
           TItem=TData
           Bordered
           OnRow=@TableOptions.OnRow
           ScrollX=@TableOptions.ScrollX
           Size="@TableSize.Small"
           @bind-SelectedRows=@TableOptions.Selected
           OnRowClick=OnRowClickHandle
           @bind-PageSize=@TableOptions.Query.PageSize>
        <ChildContent>
            @{
                // 选择列
                if (TableOptions.EnableSelection)
                {
                    <Selection Fixed="left" Width="50" />
                }
                if (TableOptions.IsDataTableSource)
                {
                    foreach (var col in TableOptions.Columns)
                    {
                        @if (!col.Visible) continue;
                        <Column TData="object" Ellipsis=@col.Ellipsis OnCell=@col.OnCell Width=@col.Width Title="@col.Label" Fixed=@col.Fixed DataIndex=@($"['{col.PropertyOrFieldName}']") CellRender="ColumnRender<object>(col)">
                        </Column>
                    }
                }
                else
                {
                    foreach (var col in TableOptions.Columns)
                    {
                        @if (!col.Visible) continue;
                        @if (col.IsEnum)
                        {
                            <Column TData="Enum" Ellipsis=@col.Ellipsis OnCell=@col.OnCell Width=@col.Width Title="@col.Label" Fixed=@col.Fixed DataIndex="@col.PropertyOrFieldName" CellRender="ColumnRender<Enum>(col)">
                            </Column>
                            continue;
                        }
                        var type = (Nullable.GetUnderlyingType(col.DataType) ?? col.DataType).Name.ToLower();
                        switch (type)
                        {
                            case "string":
                                <Column TData="String" Ellipsis=@col.Ellipsis OnCell=@col.OnCell Width=@col.Width Title="@col.Label" Fixed=@col.Fixed DataIndex="@col.PropertyOrFieldName" CellRender="ColumnRender<string>(col)">
                                </Column>
                                break;
                            case "int32":
                                <Column TData="Int32?" Ellipsis=@col.Ellipsis OnCell=@col.OnCell Width=@col.Width Title="@col.Label" Fixed=@col.Fixed DataIndex="@col.PropertyOrFieldName" CellRender="ColumnRender<Int32?>(col)">
                                </Column>
                                break;
                            case "int16":
                                <Column TData="Int16?" Ellipsis=@col.Ellipsis OnCell=@col.OnCell Width=@col.Width Title="@col.Label" Fixed=@col.Fixed DataIndex="@col.PropertyOrFieldName" CellRender="ColumnRender<Int16?>(col)">
                                </Column>
                                break;
                            case "bool":
                                <Column TData="Boolean?" Ellipsis=@col.Ellipsis OnCell=@col.OnCell Width=@col.Width Title="@col.Label" Fixed=@col.Fixed DataIndex="@col.PropertyOrFieldName" CellRender="ColumnRender<Boolean?>(col)">
                                </Column>
                                break;
                            case "datetime":
                                <Column TData="DateTime?" Ellipsis=@col.Ellipsis OnCell=@col.OnCell Width=@col.Width Title="@col.Label" Fixed=@col.Fixed DataIndex="@col.PropertyOrFieldName"></Column>
                                break;
                        }
                    }
                }
                // 按钮列
                if (TableOptions.Buttons.Count > 0)
                {
                    <ActionColumn Title="操作" Fixed="right" Width=100>
                        @if (TableOptions.Buttons.Count <= 3)
                        {
                            <Space Size=@("small")>
                                @foreach (var btn in TableOptions.Buttons)
                                {
                                    <SpaceItem>
                                        @CreateButton(btn, context)
                                    </SpaceItem>
                                }
                            </Space>
                        }
                        else
                        {
                            <Dropdown>
                                <Overlay>
                                    <Menu>
                                        @foreach (var btn in TableOptions.Buttons)
                                        {
                                            <MenuItem>
                                                @CreateButton(btn, context)
                                            </MenuItem>
                                        }
                                    </Menu>
                                </Overlay>
                                <ChildContent>
                                    <a @onclick:preventDefault>
                                        更多 <Icon Type="down" />
                                    </a>
                                </ChildContent>
                            </Dropdown>
                        }
                    </ActionColumn>
                }
            }
        </ChildContent>
        <PaginationTemplate>
            <Pagination Class="mt-10"
                        Size=@PaginationSize.Small
                        ShowSizeChanger
                        ShowQuickJumper
                        Current=@TableOptions.Query.PageIndex
                        PageSize=@TableOptions.Query.PageSize
                        Total=@TableOptions.Total
                        ShowTotal=@totalFragment
                        OnChange=PagingStatusChanged>
            </Pagination>
        </PaginationTemplate>
    </Table>
</Card>
@if (EnableGenerateQuery)
{
    <Modal Visible="AdvanceModalVisible" OnCancel=@(()=>AdvanceModalVisible = false) Title="高级查询" Footer=null>
        <ConditionGroup Columns=@TableOptions.Columns
                    TData=TData
                    @bind-Expression="ConditionExpression"
                    ShowExportButton=@(TableOptions.ExportDataLoader != null || !TableOptions.Page)
                    OnConfirmToSearch=AdvanceSearch
                    OnConfirmToExport=AdvanceExport>
        </ConditionGroup>
    </Modal>
}
@code {
    public RenderFragment CreateButton(ButtonDefinition<TData> definition, TData context)
    {
        return
    @<Button Type=@definition.ButtonType
             Size=@ButtonSize.Small
             Danger=@definition.NeedConfirm
             Icon=@definition.Icon
                 OnClickStopPropagation
             OnClick=@(()=>InvokeButtonAction(definition.Callback, context))>
        @(definition.LabelFunc?.Invoke(context) ?? definition.Label)
    </Button>
                ;
    }

    public async Task InvokeButtonAction(Func<TData, Task<bool>> func, TData data)
    {
        var result = await func.Invoke(data);
        if (result)
        {
            _ = MessageSrv.Success("执行成功");
            if (TableOptions.AutoRefreshData)
                await RefreshData();
        }
    }

    public async Task HandleAdd()
    {
        var result = await TableOptions.AddHandle();
        if (result)
        {
            _ = MessageSrv.Success("执行成功");
            if (TableOptions.AutoRefreshData)
                await RefreshData();
        }
    }

    Func<PaginationTotalContext, string> totalFragment => (context) => $"总记录数：{context.Total}";
    //							{
    //								return
    //@<span>总记录数：@context.Total</span>
    //;
    //							};

    int currentRowIndex = -1;
    string currentColumn = string.Empty;
    RenderFragment<CellData<T>> ColumnRender<T>(ColumnDefinition col)
    {
        return context =>
                    {
    var formattedValue = "";
    if (col.IsEnum || col.EnumValues != null)
    {
        var v = context.FieldValue;
        if (v != null)
        {
            if (col.EnumValues?.ContainsKey($"{v}") ?? false)
            {
                formattedValue = col.EnumValues?[$"{v}"];
            }
        }
        context.FormattedValue = formattedValue;
    }
    return
    @<span>@context.FormattedValue</span>
        //	@<span>
        //		@if(currentRowIndex == context.RowData.RowIndex
        //			&& currentColumn == col.PropertyOrFieldName
        //			&& col.EnableEdit)
        //		{
        //		// edit
        //			<Input @bind-Value=context.FieldValue AutoFocus OnBlur="ClearEditState"></Input>
        //		}
        //		else
        //		{
        //			<span class="@(col.EnableEdit ? "enable-edit" : "")" @onclick="@(()=>SetEdit(context.RowData.RowIndex, col.PropertyOrFieldName))">@context.FormattedValue</span>
        //		}
        //</span>
        ;
                };
    }


    void SetEdit(int index, string col)
    {
        this.currentRowIndex = index;
        this.currentColumn = col;
    }
    void ClearEditState()
    {
        this.currentRowIndex = -1;
        this.currentColumn = string.Empty;
        var data = TableOptions.Datas;
    }

    public async void PagingStatusChanged(PaginationEventArgs e)
    {
        if (e.Page != TableOptions.Query.PageIndex || e.PageSize != TableOptions.Query.PageSize)
        {
            TableOptions.Query.PageIndex = e.Page;
            TableOptions.Query.PageSize = e.PageSize;
            await Search();
            StateHasChanged();
        }
    }
}